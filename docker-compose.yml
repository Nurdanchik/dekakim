version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: dekakim_backend_postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: dekakim_db
      POSTGRES_USER: dekakim_user
      POSTGRES_PASSWORD: dekakim_password

  backend:
    build:
      context: ./src  # Путь к Dockerfile
      dockerfile: Dockerfile
    container_name: dekakim-backend
    restart: always
    volumes:
      - ./src:/usr/src/app
      - static_volume:/usr/src/app/static
    env_file:
      - .env
    depends_on:
      - postgres
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='root').exists() or User.objects.create_superuser('root', 'root@example.com', 'root')\" &&
      python manage.py collectstatic --no-input &&
      gunicorn config.wsgi:application --bind 0.0.0.0:80 --log-level info"

  nginx:
    image: nginx:1.25
    container_name: dekakim-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - static_volume:/usr/src/app/static

  certbot:
    image: certbot/certbot
    container_name: dekakim-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 1d & wait $${!}; done'"

volumes:
  postgres_data:
  static_volume: